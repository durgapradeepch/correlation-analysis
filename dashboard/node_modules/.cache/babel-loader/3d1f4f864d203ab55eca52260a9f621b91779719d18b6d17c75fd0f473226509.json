{"ast":null,"code":"var _jsxFileName = \"/Users/pradeep/Documents/Analysis project/dashboard/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport InsightsDashboard from \"./components/InsightsDashboard\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [insights, setInsights] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const loadInsights = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Try to load from the public directory first\n        const response = await fetch(\"/vl_insights.jsonl\");\n        if (!response.ok) {\n          throw new Error(`Failed to load insights: ${response.status} ${response.statusText}`);\n        }\n        const text = await response.text();\n        const lines = text.trim().split(\"\\n\").filter(line => line.trim());\n        if (lines.length === 0) {\n          throw new Error(\"No insights data found\");\n        }\n\n        // Parse the last line (most recent insights)\n        const latestInsights = JSON.parse(lines[lines.length - 1]);\n        setInsights(latestInsights);\n      } catch (err) {\n        console.error(\"Error loading insights:\", err);\n        setError(err instanceof Error ? err.message : \"Unknown error occurred\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadInsights();\n\n    // Set up polling to refresh insights every 30 seconds\n    const interval = setInterval(loadInsights, 30000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-50\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mx-auto px-4 py-8\",\n      children: /*#__PURE__*/_jsxDEV(InsightsDashboard, {\n        insights: insights,\n        loading: loading,\n        error: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"3SN5EolxUuSnR/aabQTX2wElwNQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","InsightsDashboard","jsxDEV","_jsxDEV","App","_s","insights","setInsights","loading","setLoading","error","setError","loadInsights","response","fetch","ok","Error","status","statusText","text","lines","trim","split","filter","line","length","latestInsights","JSON","parse","err","console","message","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/pradeep/Documents/Analysis project/dashboard/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport InsightsDashboard from \"./components/InsightsDashboard\";\nimport { Insights } from \"./types/insights\";\nimport \"./App.css\";\n\nfunction App() {\n  const [insights, setInsights] = useState<Insights | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const loadInsights = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Try to load from the public directory first\n        const response = await fetch(\"/vl_insights.jsonl\");\n\n        if (!response.ok) {\n          throw new Error(\n            `Failed to load insights: ${response.status} ${response.statusText}`\n          );\n        }\n\n        const text = await response.text();\n        const lines = text\n          .trim()\n          .split(\"\\n\")\n          .filter((line) => line.trim());\n\n        if (lines.length === 0) {\n          throw new Error(\"No insights data found\");\n        }\n\n        // Parse the last line (most recent insights)\n        const latestInsights = JSON.parse(lines[lines.length - 1]);\n        setInsights(latestInsights);\n      } catch (err) {\n        console.error(\"Error loading insights:\", err);\n        setError(err instanceof Error ? err.message : \"Unknown error occurred\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadInsights();\n\n    // Set up polling to refresh insights every 30 seconds\n    const interval = setInterval(loadInsights, 30000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <InsightsDashboard\n          insights={insights}\n          loading={loading}\n          error={error}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,iBAAiB,MAAM,gCAAgC;AAE9D,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAkB,IAAI,CAAC;EAC/D,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAU,IAAI,CAAC;EACrD,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAgB,IAAI,CAAC;EAEvDC,SAAS,CAAC,MAAM;IACd,MAAMY,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACFH,UAAU,CAAC,IAAI,CAAC;QAChBE,QAAQ,CAAC,IAAI,CAAC;;QAEd;QACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,oBAAoB,CAAC;QAElD,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CACb,4BAA4BH,QAAQ,CAACI,MAAM,IAAIJ,QAAQ,CAACK,UAAU,EACpE,CAAC;QACH;QAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACM,IAAI,CAAC,CAAC;QAClC,MAAMC,KAAK,GAAGD,IAAI,CACfE,IAAI,CAAC,CAAC,CACNC,KAAK,CAAC,IAAI,CAAC,CACXC,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACH,IAAI,CAAC,CAAC,CAAC;QAEhC,IAAID,KAAK,CAACK,MAAM,KAAK,CAAC,EAAE;UACtB,MAAM,IAAIT,KAAK,CAAC,wBAAwB,CAAC;QAC3C;;QAEA;QACA,MAAMU,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACR,KAAK,CAACA,KAAK,CAACK,MAAM,GAAG,CAAC,CAAC,CAAC;QAC1DlB,WAAW,CAACmB,cAAc,CAAC;MAC7B,CAAC,CAAC,OAAOG,GAAG,EAAE;QACZC,OAAO,CAACpB,KAAK,CAAC,yBAAyB,EAAEmB,GAAG,CAAC;QAC7ClB,QAAQ,CAACkB,GAAG,YAAYb,KAAK,GAAGa,GAAG,CAACE,OAAO,GAAG,wBAAwB,CAAC;MACzE,CAAC,SAAS;QACRtB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,YAAY,CAAC,CAAC;;IAEd;IACA,MAAMoB,QAAQ,GAAGC,WAAW,CAACrB,YAAY,EAAE,KAAK,CAAC;IAEjD,OAAO,MAAMsB,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE7B,OAAA;IAAKgC,SAAS,EAAC,yBAAyB;IAAAC,QAAA,eACtCjC,OAAA;MAAKgC,SAAS,EAAC,6BAA6B;MAAAC,QAAA,eAC1CjC,OAAA,CAACF,iBAAiB;QAChBK,QAAQ,EAAEA,QAAS;QACnBE,OAAO,EAAEA,OAAQ;QACjBE,KAAK,EAAEA;MAAM;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACd;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACnC,EAAA,CA5DQD,GAAG;AAAAqC,EAAA,GAAHrC,GAAG;AA8DZ,eAAeA,GAAG;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}